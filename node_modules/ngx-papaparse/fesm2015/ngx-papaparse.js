import { Inject, Injectable, Optional, NgModule } from '@angular/core';
import * as lib from 'papaparse/papaparse.min.js';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Papa {
    /**
     * @param {?=} config
     */
    constructor(config) {
        this.config = config;
        this._papa = lib;
        if (!this.config) {
            this.config = {};
        }
    }
    /**
     * Parse CSV to an array
     * @param {?} csv
     * @param {?=} config
     * @return {?}
     */
    parse(csv, config) {
        if (config) {
            if (config.worker === true) {
                if (this.config.scriptPath) {
                    this._papa.SCRIPT_PATH = this.config.scriptPath;
                }
                else {
                    throw new Error('When using workers, the workerScriptPath must be defined in global' +
                        ' papaparse configuration. See' +
                        ' https://alberthaff.dk/projects/ngx-papaparse/docs/v3/parsing-csv/using-serviceworkers' +
                        ' for more information.');
                }
            }
        }
        return this._papa.parse(csv, config);
    }
    /**
     * Convert an array into CSV
     * @param {?} data
     * @param {?=} config
     * @return {?}
     */
    unparse(data, config) {
        return this._papa.unparse(data, config);
    }
    /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     * @param {?} value
     * @return {?}
     */
    setLocalChunkSize(value) {
        this._papa.LocalChunkSize = value;
    }
    /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     * @param {?} value
     * @return {?}
     */
    setRemoteChunkSize(value) {
        this._papa.RemoteChunkSize = value;
    }
    /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     * @param {?} value
     * @return {?}
     */
    setDefaultDelimiter(value) {
        this._papa.DefaultDelimiter = value;
    }
    /**
     * An array of characters that are not allowed as delimiters.
     * @return {?}
     */
    get badDelimiters() {
        return this._papa.BAD_DELIMITERS;
    }
    /**
     * The true delimiter. Invisible. ASCII code 30.
     * Should be doing the job we strangely rely upon commas and tabs for.
     * @return {?}
     */
    get recordSeperator() {
        return this._papa.RECORD_SEP;
    }
    /**
     * Also sometimes used as a delimiting character. ASCII code 31.
     * @return {?}
     */
    get unitSeperator() {
        return this._papa.UNIT_SEP;
    }
    /**
     * Whether or not the browser supports HTML5 Web Workers.
     * If false, worker: true will have no effect.
     * @return {?}
     */
    get workersSupported() {
        return this._papa.WORKERS_SUPPORTED;
    }
}
Papa.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Papa.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['PapaParseGlobalConfig',] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class PapaParseModule {
}
PapaParseModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                providers: [
                    Papa
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Papa, PapaParseModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBhcGFwYXJzZS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LXBhcGFwYXJzZS9saWIvcGFwYS50cyIsIm5nOi8vbmd4LXBhcGFwYXJzZS9saWIvcGFwYS1wYXJzZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UGFwYVBhcnNlR2xvYmFsQ29uZmlnfSBmcm9tICcuL2ludGVyZmFjZXMvcGFwYS1wYXJzZS1nbG9iYWwtY29uZmlnJztcbmltcG9ydCB7UGFwYVBhcnNlUmVzdWx0fSBmcm9tICcuL2ludGVyZmFjZXMvcGFwYS1wYXJzZS1yZXN1bHQnO1xuaW1wb3J0IHtQYXBhUGFyc2VDb25maWd9IGZyb20gJy4vaW50ZXJmYWNlcy9wYXBhLXBhcnNlLWNvbmZpZyc7XG5pbXBvcnQge1BhcGFVbnBhcnNlQ29uZmlnfSBmcm9tICcuL2ludGVyZmFjZXMvcGFwYS11bnBhcnNlLWNvbmZpZyc7XG5pbXBvcnQgKiBhcyBsaWIgZnJvbSAncGFwYXBhcnNlL3BhcGFwYXJzZS5taW4uanMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFwYSB7XG4gICAgcHVibGljIF9wYXBhID0gbGliO1xuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdCgnUGFwYVBhcnNlR2xvYmFsQ29uZmlnJykgcHJpdmF0ZSBjb25maWc/OiBQYXBhUGFyc2VHbG9iYWxDb25maWdcbiAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIENTViB0byBhbiBhcnJheVxuICAgICAqL1xuICAgIHB1YmxpYyBwYXJzZShjc3Y6IHN0cmluZ3xGaWxlLCBjb25maWc/OiBQYXBhUGFyc2VDb25maWcpOiBQYXBhUGFyc2VSZXN1bHQge1xuICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLndvcmtlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5zY3JpcHRQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcGEuU0NSSVBUX1BBVEggPSB0aGlzLmNvbmZpZy5zY3JpcHRQYXRoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2hlbiB1c2luZyB3b3JrZXJzLCB0aGUgd29ya2VyU2NyaXB0UGF0aCBtdXN0IGJlIGRlZmluZWQgaW4gZ2xvYmFsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnIHBhcGFwYXJzZSBjb25maWd1cmF0aW9uLiBTZWUnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgaHR0cHM6Ly9hbGJlcnRoYWZmLmRrL3Byb2plY3RzL25neC1wYXBhcGFyc2UvZG9jcy92My9wYXJzaW5nLWNzdi91c2luZy1zZXJ2aWNld29ya2VycycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5wYXJzZShjc3YsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbiBhcnJheSBpbnRvIENTVlxuICAgICAqL1xuICAgIHB1YmxpYyB1bnBhcnNlKGRhdGEsIGNvbmZpZz86IFBhcGFVbnBhcnNlQ29uZmlnKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEudW5wYXJzZShkYXRhLCBjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc2l6ZSBpbiBieXRlcyBvZiBlYWNoIGZpbGUgY2h1bmsuXG4gICAgICogVXNlZCB3aGVuIHN0cmVhbWluZyBmaWxlcyBvYnRhaW5lZCBmcm9tIHRoZSBET00gdGhhdFxuICAgICAqIGV4aXN0IG9uIHRoZSBsb2NhbCBjb21wdXRlci4gRGVmYXVsdCAxMCBNQi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TG9jYWxDaHVua1NpemUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl9wYXBhLkxvY2FsQ2h1bmtTaXplID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaXplIGluIGJ5dGVzIG9mIGVhY2ggcmVtb3RlIGZpbGUgY2h1bmsuXG4gICAgICogVXNlZCB3aGVuIHN0cmVhbWluZyByZW1vdGUgZmlsZXMuIERlZmF1bHQgNSBNQi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UmVtb3RlQ2h1bmtTaXplKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fcGFwYS5SZW1vdGVDaHVua1NpemUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlbGltaXRlciB1c2VkIHdoZW4gaXQgaXMgbGVmdCB1bnNwZWNpZmllZCBhbmQgY2Fubm90IGJlIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkuIERlZmF1bHQgaXMgY29tbWEuXG4gICAgICovXG4gICAgcHVibGljIHNldERlZmF1bHREZWxpbWl0ZXIodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9wYXBhLkRlZmF1bHREZWxpbWl0ZXIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBhbGxvd2VkIGFzIGRlbGltaXRlcnMuXG4gICAgICovXG4gICAgZ2V0IGJhZERlbGltaXRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLkJBRF9ERUxJTUlURVJTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0cnVlIGRlbGltaXRlci4gSW52aXNpYmxlLiBBU0NJSSBjb2RlIDMwLlxuICAgICAqIFNob3VsZCBiZSBkb2luZyB0aGUgam9iIHdlIHN0cmFuZ2VseSByZWx5IHVwb24gY29tbWFzIGFuZCB0YWJzIGZvci5cbiAgICAgKi9cbiAgICBnZXQgcmVjb3JkU2VwZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5SRUNPUkRfU0VQO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsc28gc29tZXRpbWVzIHVzZWQgYXMgYSBkZWxpbWl0aW5nIGNoYXJhY3Rlci4gQVNDSUkgY29kZSAzMS5cbiAgICAgKi9cbiAgICBnZXQgdW5pdFNlcGVyYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEuVU5JVF9TRVA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgc3VwcG9ydHMgSFRNTDUgV2ViIFdvcmtlcnMuXG4gICAgICogSWYgZmFsc2UsIHdvcmtlcjogdHJ1ZSB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICAgICAqL1xuICAgIGdldCB3b3JrZXJzU3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5XT1JLRVJTX1NVUFBPUlRFRDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQYXBhfSBmcm9tICcuL3BhcGEnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBQYXBhXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBQYXBhUGFyc2VNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0lBV0ksWUFBaUUsTUFBOEI7UUFBOUIsV0FBTSxHQUFOLE1BQU0sQ0FBd0I7cUJBRmhGLEdBQUc7UUFJZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ3BCO0tBQ0o7Ozs7Ozs7SUFLTSxLQUFLLENBQUMsR0FBZ0IsRUFBRSxNQUF3QjtRQUNuRCxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxJQUFJLEVBQUU7Z0JBQ3hCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO2lCQUNuRDtxQkFBTTtvQkFDSCxNQUFNLElBQUksS0FBSyxDQUFDLG9FQUFvRTt3QkFDaEYsK0JBQStCO3dCQUMvQix3RkFBd0Y7d0JBQ3hGLHdCQUF3QixDQUFDLENBQUM7aUJBQ2pDO2FBQ0o7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7OztJQU1sQyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQTBCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7Ozs7SUFRckMsaUJBQWlCLENBQUMsS0FBYTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7Ozs7Ozs7O0lBTy9CLGtCQUFrQixDQUFDLEtBQWE7UUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDOzs7Ozs7O0lBTWhDLG1CQUFtQixDQUFDLEtBQWE7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7Ozs7OztJQU14QyxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO0tBQ3BDOzs7Ozs7SUFNRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO0tBQ2hDOzs7OztJQUtELElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7S0FDOUI7Ozs7OztJQU1ELElBQUksZ0JBQWdCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztLQUN2Qzs7O1lBMUZKLFVBQVU7Ozs7NENBSU0sUUFBUSxZQUFJLE1BQU0sU0FBQyx1QkFBdUI7Ozs7Ozs7QUNYM0Q7OztZQUdDLFFBQVEsU0FBQztnQkFDTixPQUFPLEVBQUUsRUFBRTtnQkFDWCxTQUFTLEVBQUU7b0JBQ1AsSUFBSTtpQkFDUDthQUNKOzs7Ozs7Ozs7Ozs7Ozs7In0=