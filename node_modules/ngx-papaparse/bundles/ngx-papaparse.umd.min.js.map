{"version":3,"sources":["ng://ngx-papaparse/lib/papa.ts","ng://ngx-papaparse/lib/papa-parse.module.ts"],"names":["Papa","config","this","lib","prototype","parse","csv","worker","scriptPath","Error","_papa","SCRIPT_PATH","unparse","data","setLocalChunkSize","value","LocalChunkSize","setRemoteChunkSize","RemoteChunkSize","setDefaultDelimiter","DefaultDelimiter","Object","defineProperty","BAD_DELIMITERS","RECORD_SEP","UNIT_SEP","WORKERS_SUPPORTED","Injectable","Optional","type","Inject","args","PapaParseModule","NgModule","imports","providers"],"mappings":"kVAAA,IAAAA,EAAA,WAWI,SAAAA,EAAiEC,GAAAC,KAAAD,OAAAA,aAFlDE,EAIND,KAAKD,SACNC,KAAKD,OAAS,WAOfD,EAAAI,UAAAC,eAAMC,EAAkBL,GAC3B,GAAIA,IACsB,IAAlBA,EAAOM,OAAiB,CACxB,IAAIL,KAAKD,OAAOO,WAGZ,MAAM,IAAIC,MAAM,+MAFhBP,KAAKQ,MAAMC,YAAcT,KAAKD,OAAOO,WAUjD,OAAON,KAAKQ,MAAML,MAAMC,EAAKL,IAM1BD,EAAAI,UAAAQ,iBAAQC,EAAMZ,GACjB,OAAOC,KAAKQ,MAAME,QAAQC,EAAMZ,IAQ7BD,EAAAI,UAAAU,2BAAkBC,GACrBb,KAAKQ,MAAMM,eAAiBD,GAOzBf,EAAAI,UAAAa,4BAAmBF,GACtBb,KAAKQ,MAAMQ,gBAAkBH,GAM1Bf,EAAAI,UAAAe,6BAAoBJ,GACvBb,KAAKQ,MAAMU,iBAAmBL,GAMlCM,OAAAC,eAAItB,EAAAI,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKQ,MAAMa,gDAOtBF,OAAAC,eAAItB,EAAAI,UAAA,kBAAe,KAAnB,WACI,OAAOF,KAAKQ,MAAMc,4CAMtBH,OAAAC,eAAItB,EAAAI,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKQ,MAAMe,0CAOtBJ,OAAAC,eAAItB,EAAAI,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAKQ,MAAMgB,uEAzFzBC,EAAAA,kFAIgBC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAAC,gCAXpC,GCAAC,EAAA,oDAGCC,EAAAA,SAAQF,KAAA,CAAC,CACNG,QAAS,GACTC,UAAW,CACPnC,SANR","sourcesContent":["import {Inject, Injectable, Optional} from '@angular/core';\nimport {PapaParseGlobalConfig} from './interfaces/papa-parse-global-config';\nimport {PapaParseResult} from './interfaces/papa-parse-result';\nimport {PapaParseConfig} from './interfaces/papa-parse-config';\nimport {PapaUnparseConfig} from './interfaces/papa-unparse-config';\nimport * as lib from 'papaparse/papaparse.min.js';\n\n@Injectable()\nexport class Papa {\n    public _papa = lib;\n\n    constructor(@Optional() @Inject('PapaParseGlobalConfig') private config?: PapaParseGlobalConfig\n    ) {\n        if (!this.config) {\n            this.config = {};\n        }\n    }\n\n    /**\n     * Parse CSV to an array\n     */\n    public parse(csv: string|File, config?: PapaParseConfig): PapaParseResult {\n        if (config) {\n            if (config.worker === true) {\n                if (this.config.scriptPath) {\n                    this._papa.SCRIPT_PATH = this.config.scriptPath;\n                } else {\n                    throw new Error('When using workers, the workerScriptPath must be defined in global' +\n                        ' papaparse configuration. See' +\n                        ' https://alberthaff.dk/projects/ngx-papaparse/docs/v3/parsing-csv/using-serviceworkers' +\n                        ' for more information.');\n                }\n            }\n        }\n\n        return this._papa.parse(csv, config);\n    }\n\n    /**\n     * Convert an array into CSV\n     */\n    public unparse(data, config?: PapaUnparseConfig): string {\n        return this._papa.unparse(data, config);\n    }\n\n    /**\n     * Set the size in bytes of each file chunk.\n     * Used when streaming files obtained from the DOM that\n     * exist on the local computer. Default 10 MB.\n     */\n    public setLocalChunkSize(value: number): void {\n        this._papa.LocalChunkSize = value;\n    }\n\n    /**\n     * Set the size in bytes of each remote file chunk.\n     * Used when streaming remote files. Default 5 MB.\n     */\n    public setRemoteChunkSize(value: number): void {\n        this._papa.RemoteChunkSize = value;\n    }\n\n    /**\n     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.\n     */\n    public setDefaultDelimiter(value: string): void {\n        this._papa.DefaultDelimiter = value;\n    }\n\n    /**\n     * An array of characters that are not allowed as delimiters.\n     */\n    get badDelimiters() {\n        return this._papa.BAD_DELIMITERS;\n    }\n\n    /**\n     * The true delimiter. Invisible. ASCII code 30.\n     * Should be doing the job we strangely rely upon commas and tabs for.\n     */\n    get recordSeperator() {\n        return this._papa.RECORD_SEP;\n    }\n\n    /**\n     * Also sometimes used as a delimiting character. ASCII code 31.\n     */\n    get unitSeperator() {\n        return this._papa.UNIT_SEP;\n    }\n\n    /**\n     * Whether or not the browser supports HTML5 Web Workers.\n     * If false, worker: true will have no effect.\n     */\n    get workersSupported(): boolean {\n        return this._papa.WORKERS_SUPPORTED;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {Papa} from './papa';\n\n@NgModule({\n    imports: [],\n    providers: [\n        Papa\n    ]\n})\nexport class PapaParseModule { }\n"]}